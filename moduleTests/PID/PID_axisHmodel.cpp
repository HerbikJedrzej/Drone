#include <gtest/gtest.h>
#include <iostream>
#include "../plot.hh"
#include "../Models.hh"
#include "../../src/algoritms/PID.hh"
#include <memory>

namespace{

class ModelAxisH{
protected:
    std::unique_ptr<models::Model> model;
    double output;
public:
    ModelAxisH():
        model(nullptr),
        output(0){}
    void run(const double& input){
        this->model->input(input);
        this->output = this->model->output();
    }
    double getOutput(){
        return this->output;
    }
};

class ModelAxisH1 : public ModelAxisH{
public:
    ModelAxisH1(){
        model.reset(
            new models::Delay(
                new models::Inercion(
                    new models::RealIntegral(1.0, 0.1),
                    0.2176, 2.067),
                0.03735)
        );
    }
};

class ModelAxisH2 : public ModelAxisH{
public:
    ModelAxisH2(){
        model.reset(
            new models::Delay(
                new models::Inercion(
                    new models::RealIntegral(1.0, 0.4),
                    0.07009, 0.1992),
                0.5483)
        );
    }
};

std::vector<double> powerData1 = {0.0, -0.19, -0.79, -01.39, -02.0, -02.0, -02.0, -02.0, -02.0, -02.19, -02.19, -02.0, -01.79, -01.59, -01.19, -0.19, 0.81, 0.81, 0.81, 0.81, 0.81, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 13.41, 09.36, 13.41, 13.41, 13.41, 13.41};
std::vector<double> altitudeData1 = {0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.13, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.23, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.48, 0.48, 0.48, 0.48, 0.48, 0.48, 0.48, 0.48, 0.48, 0.48, 0.48, 0.48, 0.48, 0.48, 0.48, 0.48, 0.48, 0.48, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.44, 1.44, 1.44, 1.44, 1.44, 1.44, 1.44, 1.44, 1.44, 1.44, 1.44, 1.44, 1.44, 1.44, 1.44, 1.44, 1.44, 1.44, 1.71, 1.71, 1.71, 1.71, 1.71, 1.71, 1.71, 1.71, 1.71, 1.71, 1.71, 1.71, 1.71, 1.71, 1.71, 1.71, 1.71, 1.87, 2.03, 2.03, 2.03, 2.03, 2.03, 2.03, 2.03, 2.03, 2.03, 2.03, 2.03, 2.03, 2.03, 2.03, 2.03, 2.03, 2.03, 2.36, 2.36, 2.36, 2.36, 2.36, 2.36, 2.36, 2.36, 2.36, 2.36, 2.36, 2.36};
std::vector<double> powerData2 = {00.0, 00.0, -00.41, -00.6, -01.0, -01.41, -01.41, -01.41, -01.41, -01.41, -01.41, -01.2, -00.6, 00.0, 00.59, 01.2, 03.0, 06.6, 06.6, 06.6, 06.6, 06.6, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.8, -15.2, -16.81, -17.0, -16.4, -14.4, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -07.2, -01.6, 05.0, 10.0, 15.2, 17.0, 17.0, 17.0};
std::vector<double> altitudeData2 = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.26, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.68, 1.68, 1.68, 1.68, 1.68, 1.68, 1.68, 1.68, 1.68, 1.68, 1.68, 1.68, 1.68, 1.68, 1.68, 1.68, 1.68, 1.98, 1.98, 1.98, 1.98, 1.98, 1.98, 1.98, 1.98, 1.98, 1.98, 1.98, 1.98, 1.98, 1.98, 1.98, 1.98, 2.26, 2.26, 2.26, 2.26, 2.26, 2.26, 2.26, 2.26, 2.26, 2.26, 2.26, 2.26, 2.26, 2.26, 2.26, 2.39, 2.51, 2.51, 2.51, 2.51, 2.51, 2.51, 2.51, 2.51, 2.51, 2.51, 2.51, 2.51, 2.51, 2.51, 2.51, 2.71, 2.71, 2.71, 2.71, 2.71, 2.71, 2.71, 2.71, 2.71, 2.71, 2.71, 2.71, 2.71, 2.71, 2.71, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.93, 2.93, 2.93, 2.93, 2.93, 2.93, 2.93, 2.93, 2.93, 2.93, 2.93, 2.93, 2.93, 2.93, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.91, 2.85, 2.85, 2.85, 2.85, 2.85, 2.85, 2.85, 2.85, 2.85, 2.85, 2.85, 2.85, 2.85, 2.85, 2.85, 2.77, 2.77, 2.77, 2.77, 2.77, 2.77, 2.77, 2.77, 2.77, 2.77, 2.77, 2.77, 2.77, 2.77, 2.77, 2.73, 2.68, 2.68, 2.68, 2.68, 2.68, 2.68, 2.68, 2.68, 2.68, 2.68, 2.68, 2.68, 2.68, 2.68, 2.68, 2.58, 2.58, 2.58, 2.58, 2.58, 2.58, 2.58, 2.58, 2.58, 2.58, 2.58, 2.58, 2.58, 2.58, 2.58, 2.58, 2.44, 2.44, 2.44, 2.44, 2.44, 2.44, 2.44, 2.44, 2.44, 2.44, 2.44};

TEST(PID_axis_H_test, modelsAndData){
    ModelAxisH1 model1;
    ModelAxisH2 model2;
    constexpr double dt = 0.01;
    std::vector<double> t1, t2;
    std::vector<double> out1, out2;
    for(unsigned int i = 0; i < powerData1.size(); i++){
        t1.push_back(dt * i);
        model1.run(powerData1[i]);
        out1.push_back(model1.getOutput());
        powerData1[i] *= 0.01;
    }
    for(unsigned int i = 0; i < powerData2.size(); i++){
        t2.push_back(dt * i);
        model2.run(powerData2[i]);
        out2.push_back(model2.getOutput());
        powerData2[i] *= 0.01;
    }
    plot::figure_size(1200, 780);
    plot::named_plot("altitude(m)", t1, altitudeData1);
    plot::named_plot("power(%)", t1, powerData1);
    plot::named_plot("model(m)", t1, out1);
    plot::title("PID axis H.");
    plot::legend();
    plot::save("./moduleTestsOutputData/PID/PID_axis_H1.png");
    plot::figure_close();
    plot::figure_size(1200, 780);
    plot::named_plot("altitude(m)", t2, altitudeData2);
    plot::named_plot("power(%)", t2, powerData2);
    plot::named_plot("model(m)", t2, out2);
    plot::title("PID axis H.");
    plot::legend();
    plot::save("./moduleTestsOutputData/PID/PID_axis_H2.png");
    plot::figure_close();
}

TEST(PID_axis_H_test, modelsAndPID){
    std::vector<double> input, time;
    for(double t = 0.0; t < 50.0; t += 0.01){
        input.push_back((t < 20.0)? 2.0 : 5.5);
        time.push_back(t);
    }
    PID pid;
    pid.setLimit(-20, 30);
    pid.AntiWindup = 5.0;
    pid.P = 6.2;
    pid.D = 80.0;
    pid.I = 0.012;
    for(uint8_t i = 1; i < 3; i++){
        std::unique_ptr<ModelAxisH> model(nullptr);
        if(i == 1)
            model.reset(new ModelAxisH1);
        else
            model.reset(new ModelAxisH2);
        std::vector<double>output;
        pid.reset(0);
        for(const auto& elem : input){
            pid.setR(elem);
            const double set = pid.calculate(); 
            model->run(set);
            pid.setY(model->getOutput());
            // output.push_back(set);
            output.push_back(model->getOutput());
        }
        plot::figure_size(1200, 780);
        plot::named_plot("input(m)", time, input);
        plot::named_plot("output(m)", time, output);
        plot::title("PID axis H.");
        plot::legend();
        plot::save("./moduleTestsOutputData/PID/PID_axis_H" + std::to_string(i) + "_response.png");
        plot::figure_close();
    }
}

}
